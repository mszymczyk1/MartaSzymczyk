#include <iostream>

using namespace std;
class rational_number{
    private:
    int m_n;
    int m_m;
    public:
    rational_number(int n=1, int m=1){
        m_n=n;
        m_m=m;
    }
    
    int getRationalNumber_n() const { return m_n; }
    int getRationalNumber_m() const { return m_m; }
    
    friend rational_number operator+ (const rational_number& r, const rational_number& r_r);
    friend rational_number operator- (const rational_number& r, const rational_number& r_r);
    friend rational_number operator* (const rational_number& r, const rational_number& r_r);
    friend rational_number operator% (const rational_number& r, const rational_number& r_r);
    friend rational_number operator<< (const rational_number& r, const rational_number& r_r);
    friend rational_number operator>> (const rational_number& r, const rational_number& r_r);
    friend rational_number operator== (const rational_number& r, const rational_number& r_r);
    friend rational_number operator!= (const rational_number& r, const rational_number& r_r);
    friend rational_number operator< (const rational_number& r, const rational_number& r_r);
    friend rational_number operator> (const rational_number& r, const rational_number& r_r);
};
    rational_number operator+ (const rational_number& r, const rational_number& r_r)
    {
        int den_res=r.m_m*r_r.m_m;
        int num_res=r.m_n*r_r.m_m + r_r.m_n*r.m_m;
        return rational_number(num_res,den_res);
    }
    
    rational_number operator- (const rational_number& r, const rational_number& r_r)
    {
        int den_res=r.m_m*r_r.m_m;
        int num_res=r.m_n*r_r.m_m - r_r.m_n*r.m_m;
        return rational_number(num_res,den_res);
    }
    
    rational_number operator* (const rational_number& r, const rational_number& r_r)
    {
        int den_res=r.m_m*r_r.m_m;
        int num_res=r.m_n*r_r.m_n;
        return rational_number(num_res,den_res);
    }
    rational_number operator% (const rational_number& r, const rational_number& r_r)
    {
        int den_res=r.m_m*r_r.m_n;
        int num_res=r.m_n*r_r.m_m;
        return rational_number(num_res,den_res);
    }
    
int main()
{   
    rational_number r1(1,3);
    rational_number r2(1,3);
    rational_number r1_r2_sum=r1 + r2;
    //cout<<r1_r2_sum.getRationalNumber_n() << "," <<  r1_r2_sum.getRationalNumber_m() << endl;
    rational_number r1_r2_sub= r1-r2;
    //cout<<r1_r2_sub.getRationalNumber_n() << "," <<  r1_r2_sub.getRationalNumber_m() << endl;
    rational_number r1_r2_mult= r1*r2;
    //cout<<r1_r2_mult.getRationalNumber_n() << "," <<  r1_r2_mult.getRationalNumber_m() << endl;
    rational_number r1_r2_div= r1%r2;
    cout<<r1_r2_div.getRationalNumber_n() << "," <<  r1_r2_div.getRationalNumber_m() << endl;

    return 0;
}
