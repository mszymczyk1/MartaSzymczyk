#include <iostream>
#include <string>
using namespace std;

class MyString : public string 
{
  public:
  MyString(const char* constr_string="abc"):string(constr_string){
      cout << "MyString constructor called" << endl;
  }
  
  ~MyString(){
      cout << "MyString destructor called" << endl;
  }
  
  friend ostream& operator<< (ostream& out, MyString& string )
    {
        out << string.c_str();
        
        return out;
    }
};

class Figure{
    private:
    double m_x;
    double m_y;
    MyString m_label;
    public:
    Figure(double x=1.0, double y=1.0, const char* label="Your figure"): m_label(label){
        m_x=x;
        m_y=y;
        
        cout << "Figure constructor called" << endl;
    }
    ~Figure(){
        cout << "Figure destructor called" << endl;
    }
    
    double getX() const {return m_x;}
    double getY() const {return m_y;}
    MyString getLabel() const {return m_label;}
    void print(void) const {
        cout << "I'm a Figure! My location is:" << endl;
        cout << "x=" << m_x << ", y=" << m_y << ", my label:" << m_label << endl;
    }
};

class Rectangle : public Figure {
    private:
    double m_w;
    double m_h;
    public: 
    Rectangle(double w=1.0, double h=1.0, const char* label="Rectangle"){
        cout << "Rectangle constructor called" << endl;
    }
    ~Rectangle(){
        cout << "Rectangle destructor called" << endl;
    }
    double getW() const {return m_w;}
    double getH() const {return m_h;}
}; 

class Square : public Rectangle {
    public:
    Square(double x=1.0, double y=1.0, double w=1.0, const char* label="Square"){
        cout << "Square constructor called" << endl;
    }
    
    ~Square() {
        cout << "Square destructor called" << endl;
    }
};

int main()
{
    
   //MyString str1;
   //cout << str1 << endl;
   //Figure f1;
   //f1.print();
   //Rectangle r1;
   Square s1;
    
    return 0;
}
